import pandas as pd 
import numpy as np 
import calendar


def row_to_text(row):
    return (
        f"A guest booked a {row['hotel']} with {row['adults']} adults, {row['children']} children, and {row['babies']} babies. "
        f"The booking was made through {row['market_segment']} via {row['distribution_channel']} from {row['country']}. "
        f"The lead time was {row['lead_time']} days (categorized as {row['lead_time_bins']}), and the arrival date was {row['arrival_date']} "
        f"(Year: {row['year']}, Month: {row['month']}, Day: {row['day']}, Week {row['arrival_date_week_number']}). "
        f"The guest stayed {row['stays_in_week_nights']} nights on weekdays and {row['stays_in_weekend_nights']} nights on weekends. "
        f"The reserved room type was {row['reserved_room_type']}, and the assigned room type was {row['assigned_room_type']}. "
        f"The booking had {row['booking_changes']} changes, with {row['previous_cancellations']} previous cancellations and "
        f"{row['previous_bookings_not_canceled']} successful bookings before. "
        f"The deposit type was {row['deposit_type']}, and the booking was handled by agent {row['agent']}. "
        f"The total revenue generated was {row['total_revenue']} with an ADR (Average Daily Rate) of {row['adr']}. "
        f"The reservation status was {row['reservation_status']} on {row['reservation_status_date']}. "
        f"The guest had {row['total_of_special_requests']} special requests and required {row['required_car_parking_spaces']} parking spaces. "
        f"The customer type was {row['customer_type']}, and they spent an average of {row['average_stay_duration']} days per stay. "
        f"The booking was {'canceled' if row['is_canceled'] else 'not canceled'}. "
        f"They were {'a repeated guest' if row['is_repeated_guest'] else 'a first-time guest'}. "
        f"The arrival was {'on a weekend' if row['is_weekend_arrival'] else 'on a weekday'}, and it was {'during' if row['is_holiday_season'] else 'not during'} a holiday season. "
        f"The guest waited {row['waiting_list_days']} days on the waiting list (Total: {row['days_in_waiting_list']} days)."
    )


def dataframe_to_text(dataframe: pd.DataFrame, global_metrics: dict, save_dir: str):
    """
    Convert a dataframe and global_metrics to text dataframe
    """
    data = dataframe.copy()
    
    ### --- Processing Text Data --- ###
    try:
        data['text_data'] = data.apply(row_to_text, axis=1)
    except Exception as e:
        raise Exception(f"Error in converting dataframe to text: {e}")

    # Save 
    data.to_csv(f"{save_dir}/text_data.csv", index=False)


    ### --- Processing Global Metrics --- ### 
    assert global_metrics is not None, "Global metrics is empty"
    # copy the global metrics
    gm = global_metrics.copy()

    # Artifacts
    # 1. Average Revenue Per Booking
    average_revenue_per_booking = gm.get('average_revenue_per_booking')
    # 2. Average Revenue Per Month
    revenue_per_month = gm.get('revenue_per_month')
    def func1(row):
        month_name = calendar.month_name[row['month']]
        return f"In {row['year']}, the total revenue for the month of {month_name} was {row['total_revenue']:.2f} USD. This reflects the booking revenue generated by the hotel during this period."
    # Convert all float to int 
    revenue_per_month = revenue_per_month.astype(int)
    revenue_per_month['text_data'] = revenue_per_month.apply(func1, axis=1)
    revenue_per_month = revenue_per_month.drop(columns=['year', 'month', 'total_revenue'])
    # 3. Revenue per market segment
    revenue_per_market_segment = gm.get('revenue_per_market_segment')
    def func2(row):
        return f"The {row['market_segment']} segment generated a total revenue of {row['total_revenue']:.2f} USD from hotel bookings."
    revenue_per_market_segment['text_data'] = revenue_per_market_segment.apply(func2, axis=1)
    revenue_per_market_segment = revenue_per_market_segment.drop(columns=['market_segment', 'total_revenue'])
    # 4. Revenue per meal plan
    revenue_per_meal_plan = gm.get('revenue_per_meal_plan')
    def func3(row):
        return f"The {row['meal']} meal plan generated a total revenue of {row['total_revenue']:.2f} USD from hotel bookings."
    revenue_per_meal_plan['text_data'] = revenue_per_meal_plan.apply(func3, axis=1)
    revenue_per_meal_plan = revenue_per_meal_plan.drop(columns=['meal', 'total_revenue'])
    # 5. Cancellations by hotel
    cancellations_by_hotel = gm.get('cancellations_by_hotel')
    def func4(row):
        return f"The {row['hotel']} hotel had a total of {row['is_canceled']} cancellations."
    cancellations_by_hotel['text_data'] = cancellations_by_hotel.apply(func4, axis=1)
    cancellations_by_hotel = cancellations_by_hotel.drop(columns=['hotel', 'is_canceled'])
    # 6. Cancellations by country
    cancellations_by_country = gm.get('cancellations_by_country')
    def func5(row):
        return f"The country {row['country']} had a total of {row['is_canceled']} cancellations."
    cancellations_by_country['text_data'] = cancellations_by_country.apply(func5, axis=1)
    cancellations_by_country = cancellations_by_country.drop(columns=['country', 'is_canceled'])
    # 7. Cancellations by customer type
    cancellations_by_customer_type = gm.get('cancellations_by_customer_type')
    def func6(row):
        return f"The {row['customer_type']} customer type had a total of {row['is_canceled']} cancellations."
    cancellations_by_customer_type['text_data'] = cancellations_by_customer_type.apply(func6, axis=1)
    cancellations_by_customer_type = cancellations_by_customer_type.drop(columns=['customer_type', 'is_canceled'])
    # 8. Cancellations by season
    cancellations_by_season = gm.get('cancellations_by_season')
    def func7(row):
        return f"The {row['is_holiday_season']} season had a total of {row['is_canceled']} cancellations."
    cancellations_by_season['text_data'] = cancellations_by_season.apply(func7, axis=1)
    cancellations_by_season = cancellations_by_season.drop(columns=['is_holiday_season', 'is_canceled'])
    # 9. Overall Cancellation Rate
    overall_cancellation_rate = gm.get('overall_cancellation_rate')
    # 10. Average Stay Duration
    average_stay_duration = gm.get('average_stay_duration')
    # 11. Occupancy Rate Per Hotel
    occupancy_rate_per_hotel = gm.get('occupancy_rate_per_hotel')
    def func8(row):
        return f"The {row['hotel']} hotel had an occupancy rate of {row['occupancy_rate']:.2f}%."
    occupancy_rate_per_hotel['text_data'] = occupancy_rate_per_hotel.apply(func8, axis=1)
    occupancy_rate_per_hotel = occupancy_rate_per_hotel.drop(columns=['hotel', 'occupancy_rate'])
    # 12. Demand Per Market Segment
    demand_per_market_segment = gm.get('demand_per_market_segment')
    def func9(row):
        return f"The {row['market_segment']} market segment had a total of {row['booking_count']} bookings."
    demand_per_market_segment['text_data'] = demand_per_market_segment.apply(func9, axis=1)
    demand_per_market_segment = demand_per_market_segment.drop(columns=['market_segment', 'booking_count'])
    # 13. Percentage of Families
    percentage_families = gm.get('percentage_families')
    # 14. Percentage of Repeated Guests
    percentage_repeated_guests = gm.get('percentage_repeated_guests')
    # 15. Average Special Requests
    special_requests_avg = gm.get('special_requests_avg')
    # 16. Booking trends over time
    booking_trend_over_time = gm.get('booking_trend_over_time') 
    def func10(row):
        return f"In {row['year']}, the total number of bookings for {row['month']} was {row['total_bookings']}."
    booking_trend_over_time['text_data'] = booking_trend_over_time.apply(func10, axis=1)
    booking_trend_over_time = booking_trend_over_time.drop(columns=['year', 'month', 'total_bookings'])
    # 17. Busiest weeks
    busiest_weeks = gm.get('busiest_weeks')
    def func11(row):
        return f"The week {row['week_number']} had a total of {row['total_bookings']} bookings."
    busiest_weeks['text_data'] = busiest_weeks.apply(func11, axis=1)
    busiest_weeks = busiest_weeks.drop(columns=['week_number', 'total_bookings'])
    # 18. Holiday Season Effect
    holiday_season_effect = gm.get('holiday_season_effect')
    def func12(row):
        return f"The {row['is_holiday_season']} season had a total of {row['total_bookings']} bookings."
    holiday_season_effect['text_data'] = holiday_season_effect.apply(func12, axis=1) 
    holiday_season_effect = holiday_season_effect.drop(columns=['is_holiday_season', 'total_bookings'])
    # 19. Waiting List Trend
    waiting_list_trend = gm.get('waiting_list_trend')
    def func13(row):
        return f"In {row['year']}, the total number of days on the waiting list for {row['month']} was {row['average_waiting_list_days']}."
    waiting_list_trend['text_data'] = waiting_list_trend.apply(func13, axis=1)
    waiting_list_trend = waiting_list_trend.drop(columns=['year', 'month', 'average_waiting_list_days'])


    # Merge into Single df 
    global_metrics_df = pd.concat([
        revenue_per_month, revenue_per_market_segment, revenue_per_meal_plan, cancellations_by_hotel, cancellations_by_country,
        cancellations_by_customer_type, cancellations_by_season, occupancy_rate_per_hotel, demand_per_market_segment,
        booking_trend_over_time, busiest_weeks, holiday_season_effect, waiting_list_trend
    ])

    # Remove any extra columns other than 'text_data' 
    global_metrics_df = global_metrics_df[['text_data']]

    # Make dataFrame with proper text details based on Single metrics
    single_metrics = pd.DataFrame({
        'text_data': [
            f"The average revenue per booking was {average_revenue_per_booking:.2f} USD.",
            f"The overall cancellation rate for hotel bookings was {overall_cancellation_rate:.2f}.",
            f"The average stay duration for hotel bookings was {average_stay_duration:.2f} days.",
            f"The percentage of family bookings was {percentage_families:.2f}%.",
            f"The percentage of repeated guests was {percentage_repeated_guests:.2f}%.",
            f"The average number of special requests per booking was {special_requests_avg:.2f}."
        ]
    })

    # merge to global df at the same column 'text_data'
    global_metrics_df = pd.concat([global_metrics_df, single_metrics])

    # save 
    global_metrics_df.to_csv(f"{save_dir}/global_metrics_df.csv", index=False)

    return data, global_metrics_df